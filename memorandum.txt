该文档将随着系统的逐渐成长而不断改变

任何时候，命名都是一个麻烦的事情。不同的命名规则的混合是一场视觉上的灾难。但是由于众多流派的不同，命名自然不同。比如windows和linux下的系统函数命名就是不同的。基于最初是在linux的epoll上进行第一步的开发，所以在函数/类型的命名上，采用linux下诸如epoll_create这样风格，其他命名规则基本遵循google的c++代码规范。（http://zh-google-styleguide.readthedocs.org/en/latest/google-cpp-styleguide/naming/）

因此尝试文件/函数/类型等对google c++命名规则补充定义如下
1、非类函数：全部采用小写，以模块名或者编译单元名开头，以主谓宾的模式进行函数起名，单词之间以“_”分割，以区分类函数和非类函数。
2、struct命名：全部采用小写，模块名+struct名组成。如struct epoll_event，epoll为模块名，event为struct名。
3、所有使用typedef进行类型重定义的struct需要以“_t”结尾，如sem_t。针对类class，尽可能不要使用typedef进行类（class）的重定义。
4、文件名。通常只需要与该模块同名即可，其他尽可能与google的c++规范保持一致。
5、枚举类型在使用google方式命名后，增加_e来表明是枚举类型

请注意，这不是一个c++的工程，而是披着c++外皮，但以c为中心的工程。所有c++特性的使用都是为了弥补c的一些缺陷，以及便于阅读代码。如使用inline函数替换代码的宏定义。同样这也不是纯粹的c工程，如不再像mysql一样定义自己的list实现，而是使用c++提供list实现。这基本上遵循两个原则，首要的一个是代码要好看，我个人坚信书写优美的代码有助于了解程序的脉络，从而方便改进，这种能够不断进化的代码，将比用c来实现一个蹩脚的，别人需要看半天的，不知道有多少bug在里面的自定义list要更让代码有效率。第二，我个人比较愚蠢，这么有创意和挑战的事情不太适合我。

